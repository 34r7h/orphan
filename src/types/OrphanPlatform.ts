/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace OrphanPlatform {
  export type MilestoneStruct = {
    title: string;
    description: string;
    targetDate: BigNumberish;
    reward: BigNumberish;
    verificationCriteria: string[];
    status: BigNumberish;
  };

  export type MilestoneStructOutput = [
    title: string,
    description: string,
    targetDate: bigint,
    reward: bigint,
    verificationCriteria: string[],
    status: bigint
  ] & {
    title: string;
    description: string;
    targetDate: bigint;
    reward: bigint;
    verificationCriteria: string[];
    status: bigint;
  };

  export type ExecutorProposalStruct = {
    id: BigNumberish;
    ideaNFTId: BigNumberish;
    executor: AddressLike;
    innovator: AddressLike;
    proposalTitle: string;
    proposalDescription: string;
    milestones: OrphanPlatform.MilestoneStruct[];
    estimatedTimeline: BigNumberish;
    requestedEquity: BigNumberish;
    additionalTerms: string;
    status: BigNumberish;
    fee: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type ExecutorProposalStructOutput = [
    id: bigint,
    ideaNFTId: bigint,
    executor: string,
    innovator: string,
    proposalTitle: string,
    proposalDescription: string,
    milestones: OrphanPlatform.MilestoneStructOutput[],
    estimatedTimeline: bigint,
    requestedEquity: bigint,
    additionalTerms: string,
    status: bigint,
    fee: bigint,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    id: bigint;
    ideaNFTId: bigint;
    executor: string;
    innovator: string;
    proposalTitle: string;
    proposalDescription: string;
    milestones: OrphanPlatform.MilestoneStructOutput[];
    estimatedTimeline: bigint;
    requestedEquity: bigint;
    additionalTerms: string;
    status: bigint;
    fee: bigint;
    createdAt: bigint;
    updatedAt: bigint;
  };

  export type UserStruct = {
    walletAddress: AddressLike;
    name: string;
    bio: string;
    avatar: string;
    location: string;
    website: string;
    twitter: string;
    linkedin: string;
    github: string;
    role: BigNumberish;
    isOnboarded: boolean;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type UserStructOutput = [
    walletAddress: string,
    name: string,
    bio: string,
    avatar: string,
    location: string,
    website: string,
    twitter: string,
    linkedin: string,
    github: string,
    role: bigint,
    isOnboarded: boolean,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    walletAddress: string;
    name: string;
    bio: string;
    avatar: string;
    location: string;
    website: string;
    twitter: string;
    linkedin: string;
    github: string;
    role: bigint;
    isOnboarded: boolean;
    createdAt: bigint;
    updatedAt: bigint;
  };

  export type PayoutScheduleStruct = {
    milestoneId: BigNumberish;
    amount: BigNumberish;
    percentage: BigNumberish;
    conditions: string[];
  };

  export type PayoutScheduleStructOutput = [
    milestoneId: bigint,
    amount: bigint,
    percentage: bigint,
    conditions: string[]
  ] & {
    milestoneId: bigint;
    amount: bigint;
    percentage: bigint;
    conditions: string[];
  };

  export type InvestmentTermsStruct = {
    payoutSchedule: OrphanPlatform.PayoutScheduleStruct[];
    milestoneRequirements: string[];
    exitStrategy: string;
    additionalTerms: string;
  };

  export type InvestmentTermsStructOutput = [
    payoutSchedule: OrphanPlatform.PayoutScheduleStructOutput[],
    milestoneRequirements: string[],
    exitStrategy: string,
    additionalTerms: string
  ] & {
    payoutSchedule: OrphanPlatform.PayoutScheduleStructOutput[];
    milestoneRequirements: string[];
    exitStrategy: string;
    additionalTerms: string;
  };
}

export interface OrphanPlatformInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executorProposalFee"
      | "executorProposals"
      | "executorRewardPercentage"
      | "feesEnabled"
      | "getExecutorProposal"
      | "getProposalsForIdea"
      | "getTotalMilestones"
      | "getTotalProposals"
      | "getUser"
      | "getUserProposals"
      | "ideaNFT"
      | "ideaProposals"
      | "innovatorRewardPercentage"
      | "investorProposalFee"
      | "investorProposals"
      | "milestones"
      | "owner"
      | "pause"
      | "paused"
      | "platformFeePercentage"
      | "registerUser"
      | "renounceOwnership"
      | "setExecutorProposalFee"
      | "setFeeDistribution"
      | "setInvestorProposalFee"
      | "setUsdcToken"
      | "submitExecutorProposal"
      | "toggleFees"
      | "transferOwnership"
      | "unpause"
      | "updateExecutorProposalStatus"
      | "updateIdeaNFT"
      | "updateUser"
      | "usdcToken"
      | "userProposals"
      | "users"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExecutorProposalSubmitted"
      | "ExecutorProposalUpdated"
      | "FeeCollected"
      | "InvestorProposalSubmitted"
      | "InvestorProposalUpdated"
      | "MilestoneCreated"
      | "MilestoneUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
      | "UserRegistered"
      | "UserUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "executorProposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executorProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executorRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feesEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalsForIdea",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMilestones",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProposals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "ideaNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ideaProposals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "innovatorRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investorProposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investorProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "milestones",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutorProposalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeDistribution",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvestorProposalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsdcToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitExecutorProposal",
    values: [
      BigNumberish,
      string,
      string,
      string[],
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateExecutorProposalStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIdeaNFT",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUser",
    values: [string, string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userProposals",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "executorProposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executorProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executorRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalsForIdea",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ideaNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ideaProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "innovatorRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorProposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "milestones", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutorProposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvestorProposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsdcToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitExecutorProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toggleFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateExecutorProposalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIdeaNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace ExecutorProposalSubmittedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    ideaNFTId: BigNumberish,
    executor: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    ideaNFTId: bigint,
    executor: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    ideaNFTId: bigint;
    executor: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutorProposalUpdatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    status: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    status: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    status: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeCollectedEvent {
  export type InputTuple = [
    from: AddressLike,
    amount: BigNumberish,
    feeType: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    amount: bigint,
    feeType: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    from: string;
    amount: bigint;
    feeType: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestorProposalSubmittedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    projectNFTId: BigNumberish,
    investor: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    projectNFTId: bigint,
    investor: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    projectNFTId: bigint;
    investor: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestorProposalUpdatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    status: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    status: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    status: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneCreatedEvent {
  export type InputTuple = [
    milestoneId: BigNumberish,
    proposalId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    milestoneId: bigint,
    proposalId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    milestoneId: bigint;
    proposalId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneUpdatedEvent {
  export type InputTuple = [
    milestoneId: BigNumberish,
    status: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    milestoneId: bigint,
    status: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    milestoneId: bigint;
    status: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [
    walletAddress: AddressLike,
    role: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    walletAddress: string,
    role: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    walletAddress: string;
    role: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserUpdatedEvent {
  export type InputTuple = [
    walletAddress: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [walletAddress: string, timestamp: bigint];
  export interface OutputObject {
    walletAddress: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OrphanPlatform extends BaseContract {
  connect(runner?: ContractRunner | null): OrphanPlatform;
  waitForDeployment(): Promise<this>;

  interface: OrphanPlatformInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executorProposalFee: TypedContractMethod<[], [bigint], "view">;

  executorProposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        ideaNFTId: bigint;
        executor: string;
        innovator: string;
        proposalTitle: string;
        proposalDescription: string;
        estimatedTimeline: bigint;
        requestedEquity: bigint;
        additionalTerms: string;
        status: bigint;
        fee: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  executorRewardPercentage: TypedContractMethod<[], [bigint], "view">;

  feesEnabled: TypedContractMethod<[], [boolean], "view">;

  getExecutorProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [OrphanPlatform.ExecutorProposalStructOutput],
    "view"
  >;

  getProposalsForIdea: TypedContractMethod<
    [ideaNFTId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getTotalMilestones: TypedContractMethod<[], [bigint], "view">;

  getTotalProposals: TypedContractMethod<[], [bigint], "view">;

  getUser: TypedContractMethod<
    [userAddress: AddressLike],
    [OrphanPlatform.UserStructOutput],
    "view"
  >;

  getUserProposals: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint[]],
    "view"
  >;

  ideaNFT: TypedContractMethod<[], [string], "view">;

  ideaProposals: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  innovatorRewardPercentage: TypedContractMethod<[], [bigint], "view">;

  investorProposalFee: TypedContractMethod<[], [bigint], "view">;

  investorProposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        OrphanPlatform.InvestmentTermsStructOutput,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        projectNFTId: bigint;
        investor: string;
        executor: string;
        proposalTitle: string;
        investmentAmount: bigint;
        requestedEquity: bigint;
        terms: OrphanPlatform.InvestmentTermsStructOutput;
        status: bigint;
        fee: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  milestones: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        title: string;
        description: string;
        targetDate: bigint;
        reward: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  platformFeePercentage: TypedContractMethod<[], [bigint], "view">;

  registerUser: TypedContractMethod<
    [
      name: string,
      bio: string,
      avatar: string,
      location: string,
      website: string,
      twitter: string,
      linkedin: string,
      github: string,
      role: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setExecutorProposalFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeDistribution: TypedContractMethod<
    [_innovatorReward: BigNumberish, _executorReward: BigNumberish],
    [void],
    "nonpayable"
  >;

  setInvestorProposalFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUsdcToken: TypedContractMethod<
    [_usdcToken: AddressLike],
    [void],
    "nonpayable"
  >;

  submitExecutorProposal: TypedContractMethod<
    [
      ideaNFTId: BigNumberish,
      proposalTitle: string,
      proposalDescription: string,
      milestoneTitles: string[],
      milestoneDescriptions: string[],
      milestoneTargetDates: BigNumberish[],
      milestoneRewards: BigNumberish[],
      estimatedTimeline: BigNumberish,
      requestedEquity: BigNumberish,
      additionalTerms: string
    ],
    [void],
    "nonpayable"
  >;

  toggleFees: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateExecutorProposalStatus: TypedContractMethod<
    [proposalId: BigNumberish, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateIdeaNFT: TypedContractMethod<
    [_ideaNFT: AddressLike],
    [void],
    "nonpayable"
  >;

  updateUser: TypedContractMethod<
    [
      name: string,
      bio: string,
      avatar: string,
      location: string,
      website: string,
      twitter: string,
      linkedin: string,
      github: string
    ],
    [void],
    "nonpayable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  userProposals: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        walletAddress: string;
        name: string;
        bio: string;
        avatar: string;
        location: string;
        website: string;
        twitter: string;
        linkedin: string;
        github: string;
        role: bigint;
        isOnboarded: boolean;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executorProposalFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executorProposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        ideaNFTId: bigint;
        executor: string;
        innovator: string;
        proposalTitle: string;
        proposalDescription: string;
        estimatedTimeline: bigint;
        requestedEquity: bigint;
        additionalTerms: string;
        status: bigint;
        fee: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executorRewardPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feesEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getExecutorProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [OrphanPlatform.ExecutorProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalsForIdea"
  ): TypedContractMethod<[ideaNFTId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalMilestones"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalProposals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [OrphanPlatform.UserStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserProposals"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "ideaNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ideaProposals"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "innovatorRewardPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "investorProposalFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "investorProposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        OrphanPlatform.InvestmentTermsStructOutput,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        projectNFTId: bigint;
        investor: string;
        executor: string;
        proposalTitle: string;
        investmentAmount: bigint;
        requestedEquity: bigint;
        terms: OrphanPlatform.InvestmentTermsStructOutput;
        status: bigint;
        fee: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "milestones"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        title: string;
        description: string;
        targetDate: bigint;
        reward: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "platformFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<
    [
      name: string,
      bio: string,
      avatar: string,
      location: string,
      website: string,
      twitter: string,
      linkedin: string,
      github: string,
      role: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExecutorProposalFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeDistribution"
  ): TypedContractMethod<
    [_innovatorReward: BigNumberish, _executorReward: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInvestorProposalFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUsdcToken"
  ): TypedContractMethod<[_usdcToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitExecutorProposal"
  ): TypedContractMethod<
    [
      ideaNFTId: BigNumberish,
      proposalTitle: string,
      proposalDescription: string,
      milestoneTitles: string[],
      milestoneDescriptions: string[],
      milestoneTargetDates: BigNumberish[],
      milestoneRewards: BigNumberish[],
      estimatedTimeline: BigNumberish,
      requestedEquity: BigNumberish,
      additionalTerms: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toggleFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateExecutorProposalStatus"
  ): TypedContractMethod<
    [proposalId: BigNumberish, status: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateIdeaNFT"
  ): TypedContractMethod<[_ideaNFT: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateUser"
  ): TypedContractMethod<
    [
      name: string,
      bio: string,
      avatar: string,
      location: string,
      website: string,
      twitter: string,
      linkedin: string,
      github: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userProposals"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        walletAddress: string;
        name: string;
        bio: string;
        avatar: string;
        location: string;
        website: string;
        twitter: string;
        linkedin: string;
        github: string;
        role: bigint;
        isOnboarded: boolean;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ExecutorProposalSubmitted"
  ): TypedContractEvent<
    ExecutorProposalSubmittedEvent.InputTuple,
    ExecutorProposalSubmittedEvent.OutputTuple,
    ExecutorProposalSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ExecutorProposalUpdated"
  ): TypedContractEvent<
    ExecutorProposalUpdatedEvent.InputTuple,
    ExecutorProposalUpdatedEvent.OutputTuple,
    ExecutorProposalUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeCollected"
  ): TypedContractEvent<
    FeeCollectedEvent.InputTuple,
    FeeCollectedEvent.OutputTuple,
    FeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "InvestorProposalSubmitted"
  ): TypedContractEvent<
    InvestorProposalSubmittedEvent.InputTuple,
    InvestorProposalSubmittedEvent.OutputTuple,
    InvestorProposalSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "InvestorProposalUpdated"
  ): TypedContractEvent<
    InvestorProposalUpdatedEvent.InputTuple,
    InvestorProposalUpdatedEvent.OutputTuple,
    InvestorProposalUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneCreated"
  ): TypedContractEvent<
    MilestoneCreatedEvent.InputTuple,
    MilestoneCreatedEvent.OutputTuple,
    MilestoneCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneUpdated"
  ): TypedContractEvent<
    MilestoneUpdatedEvent.InputTuple,
    MilestoneUpdatedEvent.OutputTuple,
    MilestoneUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "UserUpdated"
  ): TypedContractEvent<
    UserUpdatedEvent.InputTuple,
    UserUpdatedEvent.OutputTuple,
    UserUpdatedEvent.OutputObject
  >;

  filters: {
    "ExecutorProposalSubmitted(uint256,uint256,address,uint256)": TypedContractEvent<
      ExecutorProposalSubmittedEvent.InputTuple,
      ExecutorProposalSubmittedEvent.OutputTuple,
      ExecutorProposalSubmittedEvent.OutputObject
    >;
    ExecutorProposalSubmitted: TypedContractEvent<
      ExecutorProposalSubmittedEvent.InputTuple,
      ExecutorProposalSubmittedEvent.OutputTuple,
      ExecutorProposalSubmittedEvent.OutputObject
    >;

    "ExecutorProposalUpdated(uint256,uint8,uint256)": TypedContractEvent<
      ExecutorProposalUpdatedEvent.InputTuple,
      ExecutorProposalUpdatedEvent.OutputTuple,
      ExecutorProposalUpdatedEvent.OutputObject
    >;
    ExecutorProposalUpdated: TypedContractEvent<
      ExecutorProposalUpdatedEvent.InputTuple,
      ExecutorProposalUpdatedEvent.OutputTuple,
      ExecutorProposalUpdatedEvent.OutputObject
    >;

    "FeeCollected(address,uint256,string,uint256)": TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;
    FeeCollected: TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;

    "InvestorProposalSubmitted(uint256,uint256,address,uint256)": TypedContractEvent<
      InvestorProposalSubmittedEvent.InputTuple,
      InvestorProposalSubmittedEvent.OutputTuple,
      InvestorProposalSubmittedEvent.OutputObject
    >;
    InvestorProposalSubmitted: TypedContractEvent<
      InvestorProposalSubmittedEvent.InputTuple,
      InvestorProposalSubmittedEvent.OutputTuple,
      InvestorProposalSubmittedEvent.OutputObject
    >;

    "InvestorProposalUpdated(uint256,uint8,uint256)": TypedContractEvent<
      InvestorProposalUpdatedEvent.InputTuple,
      InvestorProposalUpdatedEvent.OutputTuple,
      InvestorProposalUpdatedEvent.OutputObject
    >;
    InvestorProposalUpdated: TypedContractEvent<
      InvestorProposalUpdatedEvent.InputTuple,
      InvestorProposalUpdatedEvent.OutputTuple,
      InvestorProposalUpdatedEvent.OutputObject
    >;

    "MilestoneCreated(uint256,uint256,uint256)": TypedContractEvent<
      MilestoneCreatedEvent.InputTuple,
      MilestoneCreatedEvent.OutputTuple,
      MilestoneCreatedEvent.OutputObject
    >;
    MilestoneCreated: TypedContractEvent<
      MilestoneCreatedEvent.InputTuple,
      MilestoneCreatedEvent.OutputTuple,
      MilestoneCreatedEvent.OutputObject
    >;

    "MilestoneUpdated(uint256,uint8,uint256)": TypedContractEvent<
      MilestoneUpdatedEvent.InputTuple,
      MilestoneUpdatedEvent.OutputTuple,
      MilestoneUpdatedEvent.OutputObject
    >;
    MilestoneUpdated: TypedContractEvent<
      MilestoneUpdatedEvent.InputTuple,
      MilestoneUpdatedEvent.OutputTuple,
      MilestoneUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UserRegistered(address,uint8,uint256)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;

    "UserUpdated(address,uint256)": TypedContractEvent<
      UserUpdatedEvent.InputTuple,
      UserUpdatedEvent.OutputTuple,
      UserUpdatedEvent.OutputObject
    >;
    UserUpdated: TypedContractEvent<
      UserUpdatedEvent.InputTuple,
      UserUpdatedEvent.OutputTuple,
      UserUpdatedEvent.OutputObject
    >;
  };
}
